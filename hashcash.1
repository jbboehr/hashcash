.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HASHCASH 1"
.TH HASHCASH 1 "2006-04-07" "1.22" "hashcash"
.SH "NAME"
hashcash \- hashcash anti\-spam / denial of service counter\-measure tool
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Mint (create) stamps:"
.IX Subsection "Mint (create) stamps:"
\&\fBhashcash\fR \fI\-m\fR [ [ \fIoptions\fR ] [ \fIresource\fR ... ] ... ]
.Sh "Check stamps:"
.IX Subsection "Check stamps:"
\&\fBhashcash\fR \fI\-c\fR [ [ \fIoptions\fR ] \fI\-r resource\fR ... ] [ \fIstamp\fR ... ] 
.Sh "Speed estimates:"
.IX Subsection "Speed estimates:"
\&\fBhashcash\fR \fI\-s\fR [ \fIoptions\fR ] [ \fI\-b bits\fR ]
.Sh "Purge database:"
.IX Subsection "Purge database:"
\&\fBhashcash\fR \fI\-p now\fR [ \fI\-j resource\fR ] [ \fI\-k\fR ] [ \fI\-t time\fR ] [ \fI\-u\fR ]
.Sh "Count partial preimage bits:"
.IX Subsection "Count partial preimage bits:"
\&\fBhashcash\fR \fI\-w\fR [ \fIoptions\fR ] [ \fIstamp\fR ... ]
.Sh "Get resource name:"
.IX Subsection "Get resource name:"
\&\fBhashcash\fR \fI\-n\fR [ \fIoptions\fR ] [ \fIstamp\fR ... ]
.Sh "Get time remaining until expiry"
.IX Subsection "Get time remaining until expiry"
\&\fBhashcash\fR \fI\-l\fR [ \fIoptions\fR ] \fI\-e period\fR [ \fIstamp\fR ... ]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Hashcash is a denial-of-service counter measure tool.  Its main
current use is to help hashcash users avoid losing email due to
content based and blacklist based anti-spam systems.
.PP
The hashcash tool allows you to create hashcash stamps to attach to
emails you send, and to verify hashcash stamps attached to emails you
receive.  Email senders attach hashcash stamps with the X\-Hashcash:
header.  Vendors and authors of anti-spam tools are encouraged to
exempt mail sent with hashcash from their blacklists and content based
filtering rules.
.PP
A hashcash stamp constitutes a proof-of-work which takes a
parameterizable amount of work to compute for the sender.  The
recipient can verify received stamps efficiently.  This package also
includes a sha1 implementation which is equivalent in functionality to
the sha1sum program available on some systems.
.PP
The hashcash proof-of-work function is to compute partial hash
preimages (the \s-1SHA1\s0 hash function is used).  By choosing the number of
bits of the preimage that are equal to 0, the work required to compute
a partial preimage can be made arbitrarily expensive \*(-- from fractions
of a second to minutes or hours.  The verification is efficient
requiring the same small cost whatever the preimage size.
.PP
For more detailed discussion of other applications hashcash has been
used for see http://www.hashcash.org/
.SH "USAGE NOTES"
.IX Header "USAGE NOTES"
In this man page a resource name is the name of the service or address
the stamp is created for.  In the case of email, the resource name is
the recipient's email address in the form user@domain.com.
.Sh "Minting stamps"
.IX Subsection "Minting stamps"
The \fI\-m\fR flag must be given to mint a stamp.
.PP
The resource name (recipient's email address) to mint the stamp
against can be passed as an argument, or if omitted is read from
stdin.  If stdin is a tty the user is prompted, if stdin is a pipe the
resource name is just silently read.  The desired preimage size can
be specified with the \-b option.  If no preimage size is specified,
the default is 20 bits.  See also the \fI\-b default\fR option.
.Sh "Checking stamps"
.IX Subsection "Checking stamps"
The \fI\-c\fR flag must be given to check a stamps expiry.  The stamp to
check can be given as an argument to \f(CW\*(C`hashcash\*(C'\fR.  If no stamp is
given the stamp is read from stdin.  If stdin is a tty the user will
be prompted, if stdin is a pipe the stamp is just silently read.  A
resource name (the recipient's email address) can be given with the
\&\fI\-r\fR option.  If a resource name is given the resource name is
compared to the resource name in the stamp, if they do not match, the
stamp is rejected.
.PP
Note: if no resource name is given the stamp is anyway checked to see
if it is otherwise valid, but it could be minted for a different
resource, which would allow stamps to be reused across different
resources, so hashcash will return unchecked exit code on exit.
.PP
Stamps are by default considered to be valid for 28 days.  The validity
period can be changed using the \fI\-e\fR flag.
.PP
If the stamp has expired or has a date in the future the stamp is
rejected and the program exits immediately.
.PP
If a required preimage size is given with the \fI\-b\fR flag, the stamps value
is computed and compared, if the stamp has insufficent value it is rejected,
and the program exits immediately.  If the \fI\-b\fR flag is not given, the
stamp is checked to see if it is otherwise valid, but hashcash will return
unchecked exit code on exit.
.PP
If the stamp is double spent the stamp is rejected.  Double spending
protection is discussed in more detail below in 
\&\*(L"Double Spending Protection\*(R".  If double spending protection is not
enabled, the stamp could be double spent, so hashcash will return
unchecked exit code (exit code 2) on exit.
.PP
The \fI\-w\fR flag can be used to request that the number of bits of the
preimage are counted and displayed. The \fI\-n\fR flag can be used to
request that the resource name in the stamp is parsed out and
displayed.  The \fI\-l\fR flag can be used to request the number of
seconds until expiry of the stamp is output.
.PP
The program will only return exit codes valid or invalid if the \fI\-c\fR
flag is used, the \fI\-b\fR flag is used, \fI\-d\fR, \fI\-r resource\fR are used.
These are the minimum set of options necessary to fully check the
validty of a stamp.  If these criteria are not met, the program will
return exit code unchecked (exit code 2) on exit.  (See also the \fI\-y\fR
flag.)
.Sh "Double Spending Protection"
.IX Subsection "Double Spending Protection"
If the \fI\-d\fR flag is used when checking stamps, a database of spent
stamps is kept.
.PP
By default stamps expire after 28 days, without expiry the database
would grow indefinately.  You can specify an alternate expiry period
with the \fI\-e\fR flag.  The recommended (and default) expiry period for
email is 28 days.  After the expiry period amount of time, the stamp
is anyway considered expired and may be purged from the database to
save space.  (See \*(L"Purging Periodically vs on Next Access\*(R" for how to
purge stamps.)
.PP
For efficiency reasons a stamp is verified before it is checked in the
database; if it is otherwise invalid no database activity will occur.
.PP
Note: The decision about how long the stamp should be considered valid
is up to the verifier.  If it is too short it is possible for some
applications that the stamp will expire before arriving at the
recipient (eg with email.)  The suggested value of 28 days should be
safe for normal email delivery delays.  The choice is a trade-off
between database size and risk of expiry prior to arrival, and depends
on the application.
.PP
Note: Different stamps in the same database can have different
validity periods, so for example stamps for different resources with
different validity periods can be stored in the same database, or the
recipient may change the validity period for future stamps without
affecting the validity of old stamps.
.Sh "Purging Periodically vs on Next Access"
.IX Subsection "Purging Periodically vs on Next Access"
To purge old stamps periodically while checking stamps use the \fI\-p
period\fR option to purge no sooner than the given time period since the
last purge.  Purging can be used with the \fI\-k\fR option to purge
unexpired stamps also, and with the \fI\-j resource\fR flag to purge only
stamps for the given resource.
.PP
There are circumstances where it may be inconvenient to purge stamps
on the next access, for example if there is a large double spend
database which takes some time to purge, and the response time of the
hashcash checker is important.  To avoid this problem, purging can be
done separately using just the \fI\-p now\fR option to request just the
purge operation.  On unix for example you could call \f(CW\*(C`hashcash \-p
now\*(C'\fR in a cron job once per day, or on demand when disk was running
low.
.Sh "Speed Estimates"
.IX Subsection "Speed Estimates"
The \fI\-s\fR flag requests measurement of how many preimage can be
tested per second.  No stamp is minted, or verified.
.PP
If the \fI\-b\fR flag is used with this option, instead an estimate of how
many seconds it would take to mint a stamp of the given size in bits
is computed.  To find out how much time it will take to mint a default
sized stamp use \fI\-s \-b default\fR.
.Sh "Notes"
.IX Subsection "Notes"
All informational output is printed on stderr.  Minted stamps, and
results of stamp verification and timing are printed on stdout.  The
quiet flag \fI\-q\fR suppresses all informational output.  The \fI\-v\fR flag
requests more informational output.  The requested output, which is
the only information that is output in quiet mode (when \fI\-q\fR is
specified) is printed on standard output.  If stdout is a pipe, or
when quiet mode is in effect the output is printed without description
(ie just bits, just seconds, just resource).
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fI\-c\fR" 4
.IX Item "-c"
Check the expiry information of stamps given as an argument or on
stdin.  (Use with \fI\-b\fR, \fI\-d\fR and \fI\-r resource\fR to fully check
stamps).
.IP "\fI\-m\fR" 4
.IX Item "-m"
Mint stamps with the resources given as arguments or on stdin.
.IP "\fI\-b bits\fR" 4
.IX Item "-b bits"
When minting a stamp, create a preimage of at least this many bits.
When verifying a stamp require that it have a preimage of at minimum
this many bits, otherwise reject it.  If omitted the default is used.
.Sp
When checking stamps, require that the stamps have this many bits.
.Sp
The default number of bits can be specified with \fI\-b default\fR.  Bits
relative to the default can also be specified with \fI\-b +n\fR for n bits
more than the default and \fI\-b \-n\fR for n bits less than the default.
.Sp
\&\fI\-b default\fR, \fI\-b +0\fR and \fI\-b \-0\fR are all equivalent.
.Sp
When doing the speed test \fI\-s\fR, can to measure speed of default
token with \fI\-s \-b default\fR.
.IP "\fI\-r resource\fR" 4
.IX Item "-r resource"
When minting stamps, the resource name (recipient's email address) to
mint the stamp against can be given either with \fI\-r resource\fR or as
an argument to \f(CW\*(C`hashcash\*(C'\fR.
.Sp
When checking stamps, the resource name (your own email address) is
given with the \fI\-r\fR option.  If the resource name is given it is
checked against the resource name in the stamp, and if they do not
match the stamp is rejected.  Note if the resource name is not given,
stamps for other resources would be accepted, and therefore hashcash
returns exit code unchecked (exit code 2) on exit.
.IP "\fI\-o\fR" 4
.IX Item "-o"
When verifying stamps multiple resources can be given.  By default the
resources are just checked one by one until a matching valid resource is
found.  However when you use wildcards or regular expressions (see \fI\-E\fR),
it is useful to be able to specify that one resource overrides another.  For
example this: \fI\-b15 \-r adam@dev.null \-o \-b10 *@dev.null\fR states that mail
to address \fIadam@dev.null\fR requires 15 bits, but mail to \fI*@dev.null\fR
requires only 10 bits.  If we omitted the \fI\-o\fR override relationship
between the two resources, a stamp of 10 bits would be accepted for address
\&\fIadam@dev.null\fR because while it would be rejected as having insufficient
bits under the first rule, it would be accepted under the 2nd rule.  The
\&\fI\-o\fR option allows you avoid this problem.
.IP "\fI\-e time\fR" 4
.IX Item "-e time"
Expiry period for spent stamps.  While checking stamps (using the \fI\-c\fR
flag), if the stamp was minted more than the specified amount of time ago,
it is considered expired.  If this option is not used, by default stamps
expire after 28 days.  The expiry period is given in seconds by default (an
argument of 0 means forever).  A single character suffix can be used to
specify alternate units (m = minutes, h = hours, d = days, M = months, y = Y
= years, and s = seconds).
.Sp
If used with the \fI\-d\fR option, the spent stamp and its expiry period
is recorded in the database.  See the \fI\-p\fR option for description of
how to purge stamps from the database.
.Sp
While minting stamps, the \fI\-e\fR flag can have an effect on the
resolution of time created in the stamp.  Without the \fI\-e\fR option,
the default resolution is days (time format: \s-1YYMMDD\s0).  Alternate
formats based on range of expiry period are as follows:
.Sp
While minting you can also given an explicit time width with the \fI\-z\fR
option instead.  (\fI\-z\fR overrides \fI\-e\fR if both are given.  If neither
are given the default is 6 chars (time format: \s-1YYMMDD\s0)).
.Sp
The rules for automatically determining appropriate time width from
\&\fI\-e\fR if no \fI\-z\fR option is given are:
.RS 4
.IP "* period >= 2 years then time format \s-1YY\s0 is used rounded down to the nearest year start;" 8
.IX Item "period >= 2 years then time format YY is used rounded down to the nearest year start;"
.PD 0
.IP "* 2 years < period <= 2 months then time format \s-1YYMM\s0 is used rounded down to the nearest month start;" 8
.IX Item "2 years < period <= 2 months then time format YYMM is used rounded down to the nearest month start;"
.IP "* 2 months < period <= 2 days then time format \s-1YYMMDD\s0 is used rounded down to the begining of the nearest day;" 8
.IX Item "2 months < period <= 2 days then time format YYMMDD is used rounded down to the begining of the nearest day;"
.IP "* 2 days < period <= 2 minutes then time format YYMMDDhhmm is used rounded down to the begining of the nearest minute;" 8
.IX Item "2 days < period <= 2 minutes then time format YYMMDDhhmm is used rounded down to the begining of the nearest minute;"
.IP "* period < 2 minutes then time format YYMMDDhhmmss is used in seconds." 8
.IX Item "period < 2 minutes then time format YYMMDDhhmmss is used in seconds."
.RE
.RS 4
.PD
.Sp
Note the rounding down is based on \s-1UTC\s0 time, not local time.  This can
lead to initially suprising results when rounding down to eg days in
time zones other than \s-1GMT\s0 (\s-1UTC\s0 = \s-1GMT\s0).  It may be clearer to
understand if you use the \fI\-u\fR option.
.RE
.IP "\fI\-z width\fR" 4
.IX Item "-z width"
The \fI\-z\fR option is for use during minting and allows user choice of
width of time width field.  See also the \fI\-e\fR option given in
combination with \fI\-m\fR to specify an implicit time field width under
the description of the \fI\-e\fR flag.  Valid widths are 6,10 or 12 chars
corresponding respectively to: \s-1YYMMDD\s0, YYMMDDhhmm, and YYMMDDhhmmss
rounded down to the nearest day, or minute respectively.
.Sp
Note the rounding down is based on \s-1UTC\s0 time, not local time.  This can
lead to initially suprising results when rounding down to eg days in
time zones other than \s-1GMT\s0 (\s-1UTC\s0 = \s-1GMT\s0).  It may be clearer to
understand if you use the \fI\-u\fR option.
.IP "\fI\-g period\fR" 4
.IX Item "-g period"
The \fI\-g\fR option is for use when checking hashcash stamps with the
\&\fI\-c\fR option and specifies a grace period for clock skew, ie if a
hashcash stamp arrives with a date in the future or in the past it
will not be rejected as having a futuristic date (or as being expired)
unless it is more futuristic (or has been expired for longer) than
this period.  The default is 2 days, which means as long as the
sending system's clock is no more than 2 days ahead (or 2 days behind)
of the receiving system's clock, the hashcash stamp will still be
accepted.
.Sp
The default units for grace period are seconds.  A single character
suffix can be used to specify alternate units (m = minutes, h = hours,
d = days, M = months, y = Y = years, and s = seconds).
.IP "\fI\-d\fR" 4
.IX Item "-d"
Store stamps in a double spend database.  If stamp has been seen
before it will be rejected even if it is otherwise valid.  The default
database file is \fIdatabase.sdb\fR in the current directory.  Only
otherwise valid stamps will be stored in the database.  Only fully
validated stamps will be stored in the database, unless the \fI\-y\fR
option is given.
.IP "\fI\-f dbname\fR" 4
.IX Item "-f dbname"
Use \fIdbname\fR instead of default filename for double spend database.  
.IP "\fI\-p period\fR" 4
.IX Item "-p period"
Purges the database of expired stamps if the given time period has
passed since the last time it was purged.  As a convenience \fI\-p now\fR
is equivalent to \fI\-p 0\fR both of which mean purge now, regardless of
when the database was last purged.  
.Sp
If used in combination with \fI\-j resource\fR only the stamps minted for
the given resource are purged.
.Sp
If used in combination with \fI\-k\fR all stamps even un-expired stamps
are purged.  Can be used in combination with \fI\-t time\fR to expire as
if the current time were the given time.
.IP "\fI\-k\fR" 4
.IX Item "-k"
Use with option \fI\-p\fR to request all stamps are purged rather than
just expired ones.
.IP "\fI\-j resource\fR" 4
.IX Item "-j resource"
Use with option \fI\-p\fR to request that just stamps matching the given
resource name are to be purged, rather than the default which is to
purge all expired stamps.  If the resource name is the empty string,
all stamps are matched (this is equivalent to omitting the \fI\-j\fR
option).
.Sp
Note the \fI\-E\fR, \fI\-M\fR and \fI\-S\fR type of match flags also apply to
resources given with the \fI\-j resource\fR flag.
.IP "\fI\-s\fR" 4
.IX Item "-s"
Print timing information only, and don't proceed to create a stamp.
If combined with \fI\-b bits\fR flag print estimate of how long the
requested preimage size would take to compute, if \fI\-s\fR given by
itself, just prints speed of the preimage finder.  To print an
estimate of how long the default number of bits would take use \fI\-b
default\fR.
.IP "\fI\-h\fR" 4
.IX Item "-h"
Print short usage information.
.IP "\fI\-v\fR" 4
.IX Item "-v"
Print more verbose informational output about the stamp minting or
verification.  (If \-v is the only argument, prints the tool version
number.)
.IP "\fI\-V\fR" 4
.IX Item "-V"
Prints tool version number.
.IP "\fI\-q\fR" 4
.IX Item "-q"
Batch mode.  Prints no information other than output.  This option
overrides the \fI\-v\fR option.
.IP "\fI\-X\fR" 4
.IX Item "-X"
When minting, prints the hashcash email X\-header 'X\-Hashcash: ' before
the stamp.  Without this option just the bare stamp is printed.  
.Sp
When checking, after scanning stamps given as arguments, scans stdin
for lines starting with the string 'X\-Hashcash:', and uses the rest of
the matching line as the stamp.  Only the lines up to and ending at
the first blank line are scanned (see also \fI\-i\fR flag which can be
used to override this).  A blank line is the separator used to
separate the headers from the body of a mail message or \s-1USENET\s0
article.  This is meant to make it convenient to pipe a mail message
or \s-1USENET\s0 article to hashcash on stdin.
.IP "\fI\-x extension\fR" 4
.IX Item "-x extension"
An extension string composed of name value sets.  The extension format
is described below in the section on the hashcash stamp format.  This
allows users to define their own stamp extensions which are hashed
into the stamp, verified by recipients that support them, and ignored
by recipients that don't support them.  Note the extension hook
mechanism has not yet been implemented.  This will come in a
subsequent release.
.IP "\fI\-i\fR" 4
.IX Item "-i"
When checking and using the \fI\-X\fR flag, ignore the blank line
boundary between headers and body of the message, and check for
stamps in the body too if one is not found in the headers.
.IP "\fI\-t time\fR" 4
.IX Item "-t time"
Pretend the current time is the time given for purposes of minting
stamps, verifying stamps and purging old stamps from the database.
Time is given in a format based on \s-1UTCTIME\s0 format
YYMMDD[hhmm[ss]].
.Sp
Time is expressed in local time by default.  Use with \fI\-u\fR flag to
give time in \s-1UTC\s0 (\s-1GMT\s0).
.Sp
You can also give time relative to the current time by prefixing the
argument with + or \-.  The default units for relative time are
seconds.  A single character suffix can be used to specify alternate
units (m = minutes, h = hours, d = days, M = months, y = Y = years,
and s = seconds).
.Sp
Note: when time is expressed in local time, if there is daylight
savings in your timezone, there are one or two ambiguous hours per
year at the time of change from daylight savings time to normal time.
.IP "\fI\-u\fR" 4
.IX Item "-u"
Input and output absolute times in \s-1UTC\s0 (\s-1GMT\s0) instead of local time.
.IP "\fI\-a period\fR" 4
.IX Item "-a period"
Add (or subtract if number is negative) a random value from the
current time before minting the stamp.  This hides the time the stamp
was created, which may be useful for anonymous users.  Note adding
(rather than subtracting) a random time may be risky if the stamp
takes less than the added time to arrive as the recipient will reject
stamps with time stamps in the future.
.IP "\fI\-n\fR" 4
.IX Item "-n"
Print resource name parsed from stamp being verified.  Returns exit
code unchecked on exit.
.IP "\fI\-l\fR" 4
.IX Item "-l"
Print number of seconds left before stamp expires.  Returns exit code
unchecked on exit.
.Sp
Note: the calculation includes the grace period, so can be up to 2
times grace period longer than you might otherwise expect (clock fast
but system has to presume it could be slow).  If you want to exclude
the grace period add \fI\-g0\fR to set grace period to 0 for the
calculation.
.IP "\fI\-w\fR" 4
.IX Item "-w"
Print number of bits of preimage of stamp.  Returns exit code
unchecked on exit.
.IP "\fI\-y\fR" 4
.IX Item "-y"
Returns success if the stamp is valid even if it is not fully checked.
Use with \fI\-c\fR where not all of \fI\-d\fR, \fI\-r\fR are specified to get
success exit code on valid but partially checked stamp.  Similarly can
use with \fI\-n\fR, \fI\-l\fR, \fI\-w\fR with same effect.
.IP "\fI\-M\fR" 4
.IX Item "-M"
When checking stamps, allow wildcard \fI*\fR matching in the resource
name to make it simpler to specify multiple email addresses and to
allow matching catch-all addresses and addresses including subdomains.
This is the default.  See also \fI\-S\fR, \fI\-E\fR and \fI\-C\fR
.IP "\fI\-S\fR" 4
.IX Item "-S"
When checking stamps use simple text compare to compare resource names
to those in stamps.  See also \fI\-M\fR, \fI\-E\fR and \fI\-C\fR.
.IP "\fI\-E\fR" 4
.IX Item "-E"
When checking stamps use regular expressions to specify resource names
to make it simpler to specify multiple email addresses, catch-all
addresses, classes of extension addresses and addresses including
subdomains.  Note regular expression syntax is \s-1POSIX\s0 style: special
characters do not need to be quoted to have their special meaning; but
they do have to be quoted with \e to that character in the searched
string.  The regular expression automatically has ^ added at the
beginning and $ added at the end, if they are not specified.  The
special characters ^ matches the beginning of the resouce, and $
matches the end of resource.
.Sp
(Note even if compiled with \s-1BSD\s0 regular expressions, \s-1POSIX\s0 style
syntax is used; also note \s-1BSD\s0 regular expressions do not support
ranges {}.)
.IP "\fI\-C\fR" 4
.IX Item "-C"
By default resources are canonicalized to lower case on minting and on
checking.  The \fI\-C\fR flag overrides this so that resources are treated
as case sensitive on checking, and not canonizalized on minting.
.IP "\fI\-P\fR" 4
.IX Item "-P"
Print progress info (number of iterations, expected iterations,
percentage done, best stamp size found so far). 
.IP "\fI\-O core\fR" 4
.IX Item "-O core"
Select hashcash core with that number.  Currently 0\-9 are valid cores.
Not all cores work on all architectures.  Eg some are x86 specific
assembler, others \s-1PPC\s0 specific assembler.  If a core is not valid
hashcash returns failure and explains what happened.
.IP "\fI\-Z n\fR" 4
.IX Item "-Z n"
Compress the stamp.  This is a time vs space trade off.  Larger stamps
are faster, but arguably slightly ugly.  For fastest stamps (the
default) use \-Z 0; for partly compressed stamps use \-Z 1; for very
compressed, but somewhat slow stamps use \-Z 2.  (Note: due to a late
discovered bug, \-Z2 is the same as \-Z1 for now until I can fix that.)
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Sh "Creating stamps"
.IX Subsection "Creating stamps"
.ie n .IP """hashcash \-s""" 4
.el .IP "\f(CWhashcash \-s\fR" 4
.IX Item "hashcash -s"
Print timing information about how many preimages the machine can try
per second.
.ie n .IP """hashcash \-sv""" 4
.el .IP "\f(CWhashcash \-sv\fR" 4
.IX Item "hashcash -sv"
More accurate but quite slow benchmarking of different processor
specific minting cores.
.ie n .IP """hashcash \-s \-b default""" 4
.el .IP "\f(CWhashcash \-s \-b default\fR" 4
.IX Item "hashcash -s -b default"
Print how long it would take the machine to compute a default sized
preimage (but don't actually compute a preimage).
.ie n .IP """hashcash \-s \-b 32""" 4
.el .IP "\f(CWhashcash \-s \-b 32\fR" 4
.IX Item "hashcash -s -b 32"
Print how long it would take the machine to compute a 32 bit preimage
(but don't actually compute a preimage).
.ie n .IP """hashcash \-m""" 4
.el .IP "\f(CWhashcash \-m\fR" 4
.IX Item "hashcash -m"
Mint a stamp.  Will prompt for resource name and mint with default
value (number of preimage bits).
.ie n .IP """hashcash \-m foo""" 4
.el .IP "\f(CWhashcash \-m foo\fR" 4
.IX Item "hashcash -m foo"
Compute preimage on resource foo.  Will mint with default value
(number of preimage bits).
.ie n .IP """hashcash \-m foo \-b 10""" 4
.el .IP "\f(CWhashcash \-m foo \-b 10\fR" 4
.IX Item "hashcash -m foo -b 10"
Compute 10 bit preimage on resource foo.
.ie n .IP """hashcash \-a \-3d""" 4
.el .IP "\f(CWhashcash \-a \-3d\fR" 4
.IX Item "hashcash -a -3d"
Subtract a random time of between 0 days and 3 days from the stamp's
creation time.  This is the same fuzz factor used by mixmaster to
reduce risk of timing\-correlations.
.Sh "Examining Stamps"
.IX Subsection "Examining Stamps"
.ie n .IP """hashcash \-w 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-w 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -w 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Report the value of the stamp (how many bits of preimage) there are.
The example is a 24 bit preimage, which takes on average 25 seconds
to create on a 3Ghz P4.
.ie n .IP """hashcash \-mq \-b 10 foo | hashcash \-w""" 4
.el .IP "\f(CWhashcash \-mq \-b 10 foo | hashcash \-w\fR" 4
.IX Item "hashcash -mq -b 10 foo | hashcash -w"
Create a stamp in batch mode, pass to hashcash on stdin to verify,
have it print how many bits there were.
.ie n .IP """hashcash \-n 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-n 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -n 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Report the resource name from the stamp.  The resource name in the
example is foo.
.ie n .IP """hashcash \-l \-e 30y 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-l \-e 30y 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -l -e 30y 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Report how long until the stamp expires if it expires in 30 years from
its creation date.  (Note dates too far into the future run into the
2038 end of Epoch, which is the unix time analog of the y2k bug).
.Sh "Verifying Stamps"
.IX Subsection "Verifying Stamps"
.ie n .IP """hashcash \-c 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-c 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -c 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Check if the stamp is valid.  Note as we are not checking the stamp in
a double spend database, and did not specify a resource name or
required number of bits of preimage and hashcash will consider the
stamp not fully checked, and it will report it as valid but not fully
unchecked, or as invalid if there is any problem with the stamp.
.ie n .IP """hashcash \-c \-b24 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-c \-b24 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -c -b24 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Check that the value of the stamp is greater or equal to 24 bits.
This example has 24 bit value.  If you increase the requested number
of bits or replace the stamp with one with less than 24 bit preimage
the stamp will be rejected.
.ie n .IP """hashcash \-c \-b24 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-c \-b24 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -c -b24 -r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a"
As above check if the stamp has sufficient value, but in addition
check that the resource name given matches the resource name in the
stamp.
.Sh "Double Spending Prevention"
.IX Subsection "Double Spending Prevention"
The examples given in \*(L"Verifying Stamps\*(R" can be modified to keep a
double spend database so that the same stamp will not be accepted
twice.  Note a stamp will only be checked in and added to the database
if it is otherwise valid and fully checked (a required number of bits
of preimage has been specified and a resource has been specified).
.ie n .IP """hashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -cd -b 10 -r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Check the stamp and add to double spent database if it's valid (has
correct resource name and sufficient value).
.ie n .IP """hashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -cd -b 10 -r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Try to double spend the stamp.  It will be rejected as double spent.
.Sh "Stamp Expiry"
.IX Subsection "Stamp Expiry"
To prevent the double spend database growing indefinately, the
recipient can request that stamps be no older than a specified period.
After expiry old stamps can dropped from the double spend database as
they will no longer be needed \*(-- expired stamps can be rejected based
purely on their old date, so the space taken by expired stamps in the
double spend database can be saved without risk of accepting an
expired though otherwise valid stamp.
.PP
The third field of the stamp is the \s-1UTC\s0 time since 1st January 1970.
The default time format is \s-1YYMMDD\s0, time rounded down to the nearest
day.  The default validity period is 28 days.
.PP
You can provide an alternative validity period with the \fI\-e\fR option.
.ie n .IP """hashcash \-cd \-b 10 \-e 2d \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-cd \-b 10 \-e 2d \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -cd -b 10 -e 2d -r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Try verifying an old stamp, the above stamp was created 11 Aug 2002.
.Sp
We gave option \fI\-e 2d\fR so the stamps expiry date is 2 days after
creation, which is now in the past.
.Sp
Note: if the creation time is expressed in the stamp in days, the
precise creation date is the begining of the specified day in \s-1UTC\s0 time
(similarly for alternate units the creation time is rounded down to
the begining of the unit it is expressed in).  For units in days, for
example, this may mean depending on your time zone that the stamp
appears to be considered invalid in under the specified expiry period
in days relative to your relative view of what day it is, as the
calculation is based on current time in \s-1UTC\s0, and the creation time of
the stamp is expressed in \s-1UTC\s0 time.
.ie n .IP """hashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a""" 4
.el .IP "\f(CWhashcash \-cd \-b 10 \-r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a\fR" 4
.IX Item "hashcash -cd -b 10 -r foo 1:24:040806:foo::511801694b4cd6b0:1e7297a"
Test whether the stamp is otherwise valid, apart from having expired.
Omitting the \fI\-e\fR tells hashcash that the stamp will never expire.
An expiry period of forever can also be given explitly like this: \fI\-e
0\fR, where an expiry period of 0 means forever.
.Sh "Purging old stamps"
.IX Subsection "Purging old stamps"
If the \fI\-c\fR, \fI\-d\fR options are used together, each time a stamp is
checked, if it is valid and all of the mandatory aspects of the stamp
are verified (preimage bits check, resource name check) then the
stamp and its expiry period is written to the database file.  The
default expiry period if an expiry period is not given explicitly with
the \fI\-e\fR option is 28 days (ie stamps expire after 4 weeks).
.PP
First mint and then add a stamp:
.ie n .IP """hashcash \-m \-b 10 foo \-e 1m > stamp""" 4
.el .IP "\f(CWhashcash \-m \-b 10 foo \-e 1m > stamp\fR" 4
.IX Item "hashcash -m -b 10 foo -e 1m > stamp"
Note: we specified an expiry on minting in this example, to ensure
that the stamp creation time is given in high enough resolution in the
stamp that the stamp will not be considered expired at time of
creation.  (Recall the default resolution is in days, a stamp created
with a creation time rounded down to the beginging of the day is
unlikely to be considered valid 1 minute later unless you mint it at
midnight \s-1UTC\s0 time.)
.ie n .IP """hashcash \-cd \-e 1m \-b 10 \-r foo < stamp""" 4
.el .IP "\f(CWhashcash \-cd \-e 1m \-b 10 \-r foo < stamp\fR" 4
.IX Item "hashcash -cd -e 1m -b 10 -r foo < stamp"
The stamp expires in 1 minute.  Wait 1 minute and then explicitly
request that expired stamps be purged:
.ie n .IP """hashcash \-p now""" 4
.el .IP "\f(CWhashcash \-p now\fR" 4
.IX Item "hashcash -p now"
Then try resubmitting the same stamp:
.ie n .IP """hashcash \-cd \-e 1m \-b 10 \-r foo < stamp""" 4
.el .IP "\f(CWhashcash \-cd \-e 1m \-b 10 \-r foo < stamp\fR" 4
.IX Item "hashcash -cd -e 1m -b 10 -r foo < stamp"
and the stamp will be rejected anyway as it has expired, illustrating
why it was not necessary to keep this stamp in the database.
.Sp
With the default database (the sdb format) the database contents are
human readable, so you can view their contents by cating them to the
terminal:
.ie n .IP """cat hashcash.sdb""" 4
.el .IP "\f(CWcat hashcash.sdb\fR" 4
.IX Item "cat hashcash.sdb"
to see that the stamp really is added and then after puring
subsequently purged due to expiry.
.Sh "Purging old stamps on Demand"
.IX Subsection "Purging old stamps on Demand"
As a convenience you can purge at the same time as checking stamps by
using the \fI\-p\fR option with the \fI\-c\fR option.
.ie n .IP """hashcash \-m \-b 10 foo > stamp""" 4
.el .IP "\f(CWhashcash \-m \-b 10 foo > stamp\fR" 4
.IX Item "hashcash -m -b 10 foo > stamp"
.PD 0
.ie n .IP """hashcash \-cd \-p now \-e 1 \-b 10 \-r foo < stamp""" 4
.el .IP "\f(CWhashcash \-cd \-p now \-e 1 \-b 10 \-r foo < stamp\fR" 4
.IX Item "hashcash -cd -p now -e 1 -b 10 -r foo < stamp"
.PD
It may be inefficient to purge stamps on every use as the entire
database has to be scanned for expired stamps.  By giving a time
period to the \fI\-p\fR option, you can tell \f(CW\*(C`hashcash\*(C'\fR to purge no more
frequently than that time period since the previous purge.
.Sp
For example:
.ie n .IP """hashcash \-cd \-p 1d \-e 1 \-b 10 \-r foo < stamp""" 4
.el .IP "\f(CWhashcash \-cd \-p 1d \-e 1 \-b 10 \-r foo < stamp\fR" 4
.IX Item "hashcash -cd -p 1d -e 1 -b 10 -r foo < stamp"
tells \f(CW\*(C`hashcash\*(C'\fR to purge any expired stamps no more than once per
day.
.ie n .IP """hashcash \-p 1M \-j foo""" 4
.el .IP "\f(CWhashcash \-p 1M \-j foo\fR" 4
.IX Item "hashcash -p 1M -j foo"
tells \f(CW\*(C`hashcash\*(C'\fR to purge only expired stamps matching resource foo
once per month.
.ie n .IP """hashcash \-p now \-k""" 4
.el .IP "\f(CWhashcash \-p now \-k\fR" 4
.IX Item "hashcash -p now -k"
tells \f(CW\*(C`hashcash\*(C'\fR to purge all stamps (expired and unexpired) now.
.SH "stamp format (version 1)"
.IX Header "stamp format (version 1)"
The current stamp format is version 1.  This tool can verify hashcash
version 0 stamps also, but version 0 stamps are no longer created as
they are being phased out in favor of the more extensible v1 stamp
format.
.IP "\fIver\fR:\fIbits\fR:\fIdate\fR:\fIresource\fR:[\fIext\fR]:\fIrand\fR:\fIcounter\fR" 4
.IX Item "ver:bits:date:resource:[ext]:rand:counter"
.PP
where 
.IP "\fIver\fR = 1" 4
.IX Item "ver = 1"
.PD 0
.IP "\fIbits\fR = how many bits of partial-preimage the stamp is claimed to have" 4
.IX Item "bits = how many bits of partial-preimage the stamp is claimed to have"
.IP "\fIdate\fR = YYMMDD[hhmm[ss]]" 4
.IX Item "date = YYMMDD[hhmm[ss]]"
.IP "\fIresource\fR = resource string (eg \s-1IP\s0 address, email address)" 4
.IX Item "resource = resource string (eg IP address, email address)"
.IP "\fIext\fR = extension \*(-- ignored in the current version" 4
.IX Item "ext = extension  ignored in the current version"
.PD
Format of extension:
.RS 4
.IP "[name1[=val1[,val2...]];[name2[=val1[,val2...]]...]]" 4
.IX Item "[name1[=val1[,val2...]];[name2[=val1[,val2...]]...]]"
Note the value can also contain =.  Example extension (not a real one):
.Sp
.Vb 1
\&        name1=2,3;name2;name3=var1=2,var2=3,2,val
.Ve
.Sp
Which would be extension name1 has values 2 and 3; extension name2 has
no values; extension name3 has 3 values \*(L"var1=2\*(R", \*(L"var2=3\*(R", \*(L"2\*(R" and
\&\*(L"val\*(R".  The hashcash extension may interpret the values as it sees fit
eg \*(L"var1=2\*(R" could be the value of an option to the extension name3.
.RE
.RS 4
.RE
.IP "\fIrand\fR = string of random characters from alphabet a\-zA\-Z0\-9+/= to avoid preimage with other sender's stamps" 4
.IX Item "rand = string of random characters from alphabet a-zA-Z0-9+/= to avoid preimage with other sender's stamps"
.PD 0
.IP "\fIcounter\fR = to find a stamp with the desired number of preimage bits need to try lots of different strings this counter is incremented on each try. The Counter is also composed of characters from the alphabet a\-zA\-Z0\-9+/=.  (Note an implementation is not required to count sequentially)." 4
.IX Item "counter = to find a stamp with the desired number of preimage bits need to try lots of different strings this counter is incremented on each try. The Counter is also composed of characters from the alphabet a-zA-Z0-9+/=.  (Note an implementation is not required to count sequentially)."
.PD
.SH "FILES"
.IX Header "FILES"
.IP "\fIhashcash.sdb\fR" 4
.IX Item "hashcash.sdb"
default double spend database
.SH "EXIT STATUS"
.IX Header "EXIT STATUS"
\&\f(CW\*(C`hashcash\*(C'\fR returns success (exit code 0) after successfully minting a
stamp, after fully checking a stamp and finding it valid, and after a
timing test.
.PP
If when checking a stamp it is found to be invalid (due to being
malformed, being expired, having insufficient value, having a date in
the future, or being double spent), \f(CW\*(C`hashcash\*(C'\fR returns failure (exit
code 1).
.PP
If insufficient options are given to fully check a stamp, if the stamp
is otherwise valid return unchecked (exit code 2).  If the \fI\-y\fR flag
is given and hashcash would normally return unchecked, exit code
success is returned instead.
.PP
If any exception occurs (file read failure for database checking or
corrupted database contents) an exit status of 3 is returned.
.SH "AUTHOR"
.IX Header "AUTHOR"
Written by Adam Back <adam@cypherspace.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIsha1sum\fR\|(1), \fIsha1\-hashcash\fR\|(1), \fIsha1\fR\|(1), http://www.hashcash.org/
